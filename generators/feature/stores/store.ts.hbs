import { produce } from 'immer';
import create from 'zustand';
import { persist } from 'zustand/middleware';

import {
  {{properCase name}}Create,
  {{properCase name}}Type,
  {{properCase name}},
} from '@/features/{{name}}';
import { uuid } from '@/libs/uuid';

export interface {{properCase name}}Store {
  {{name}}: {{properCase name}};
  add{{properCase name}}: (new{{properCase name}}: {{properCase name}}Create) => void;
  edit{{properCase name}}: (updated{{properCase name}}: {{properCase name}}Type) => void;
  delete{{properCase name}}: ({{name}}ToDelete: {{properCase name}}Type) => void;
}

export const use{{properCase name}} = create<{{properCase name}}Store>(
  persist(
    (set) => ({
      {{name}}: {},
      add{{properCase name}}: (new{{properCase name}}) =>
        set(
          produce((state) => {
            const {{name}}Id = uuid();
            state.{{name}}[{{name}}Id] = {
              ...new{{properCase name}},
              id: {{name}}Id,
            };
          })
        ),
      edit{{properCase name}}: (updated{{properCase name}}) =>
        set(
          produce((state) => {
            state.{{name}}[updated{{properCase name}}.id] = updated{{properCase name}};
          })
        ),
      delete{{properCase name}}: ({{name}}) =>
        set(
          produce((state) => {
            delete state.{{name}}[{{name}}.id];
          })
        ),
    }),
    {
      name: '{{name}}',
    }
  )
);
